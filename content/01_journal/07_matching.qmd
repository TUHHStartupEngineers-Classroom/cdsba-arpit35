---
title: "Matching and Subclassification"
---

# Task - 1

------------------------------------------------------------------------

## Loading the data frame

```{r}
df  <- readRDS("Causal_Data_Science_Data/membership.rds")
df
```

## DAG

```{r}
library(tidyverse)
library(dagitty)
library(ggdag)
library(ggplot2)


# Define the DAG
dag <- 'dag {
  card [pos="0.1,0.5"]
  avg_purch [pos="0.5,0.5"]
  pre_avg_purch [pos="0.3,1"]
  pre_avg_purch -> card
  pre_avg_purch -> avg_purch
  card -> avg_purch
}'

# Convert the text to a dagitty object
dag <- dagitty(dag)

# Plot the DAG using ggdag
ggdag(dag) + theme_dag() + geom_dag_label_repel(aes(label = name))
```

# Task - 2

------------------------------------------------------------------------

```{r}
model <- lm(avg_purch ~ card, data = df)
summary(model)
```

# Task - 3

------------------------------------------------------------------------
## (Coarsened) Exact Matching.

### Without specifying coarsening

```{r}
library(MatchIt)
cem <- matchit(card ~ sex + age + pre_avg_purch, data = df, method = "cem", estimand = 'ATE')
summary(cem)

df_cem <- match.data(cem)

model_cem <- lm(avg_purch ~ card, data = df_cem, weights = weights)
summary(model_cem)

```

### Custom coarsening

```{r}
cutpoints <- list(age = seq(24, 65, 18), 
                  pre_avg_purch = seq(3, 200, 50))
cem_coars <- matchit(card ~ sex + age + pre_avg_purch, data = df, method = "cem", estimand = 'ATE', cutpoints = cutpoints)
summary(cem_coars)

df_cem <- match.data(cem_coars)

model_cem <- lm(avg_purch ~ card, data = df_cem, weights = weights)
summary(model_cem)

```

## Nearest-Neighbor Matching.

```{r}
nn <- matchit(card ~ age + sex + pre_avg_purch, data = df, method = "nearest", distance = "mahalanobis", replace = T)
summary(nn)

df_nn <- match.data(nn)

model_nn <- lm(avg_purch ~ card, data = df_nn, weights = weights)
summary(model_nn)
```

## Inverse Probability Weighting.

```{r}
model_prop <- glm(card ~ age + sex + pre_avg_purch, data = df, family = binomial(link = "logit"))
summary(model_prop)

df_aug <- df %>% mutate(propensity = predict(model_prop, type = "response"))

df_ipw <- df_aug %>% mutate(ipw = (card / propensity) + ((1 - card) / (1 - propensity)))

df_ipw %>% 
  select(card, age, sex, pre_avg_purch, propensity, ipw)

model_ipw <- lm(avg_purch ~ card, data = df_ipw, weights = ipw)
summary(model_ipw)
```


